/*
 * Copyright 2011-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }

    dependencies {
        classpath 'org.kordamp.gradle:project-gradle-plugin:0.6.0'
        classpath 'gradle.plugin.gradle-java9-collision:plugin:0.2.3'
        //classpath 'gradle.plugin.org.javamodularity:moduleplugin:1.0.1'
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.9.2'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
        classpath 'com.google.gradle:osdetector-gradle-plugin:1.6.0'
    }
}

apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'org.kordamp.gradle.project'
apply plugin: 'com.google.osdetector'
apply plugin: 'org.jonnyzzz.java9c'
//apply plugin: 'org.javamodularity.moduleplugin'

ext.platform = osdetector.os != 'osx' ? osdetector.os : 'mac'

if (!project.hasProperty('bintrayUsername')) ext.bintrayUsername = ''
if (!project.hasProperty('bintrayApiKey')) ext.bintrayApiKey = ''
if (!project.hasProperty('sonatypeUsername')) ext.sonatypeUsername = ''
if (!project.hasProperty('sonatypePassword')) ext.sonatypePassword = ''

config {
    release = (rootProject.findProperty('release') ?: false).toBoolean()

    info {
        name          = 'Groovyfx'
        vendor        = 'Kordamp'
        description   = 'A library for writing JavaFX applications in the Groovy language'
        inceptionYear = '2011'
        tags          = ['Groovy', 'JavaFX', 'GroovyFX']

        links {
            website      = 'http://groovyfx.org'
            issueTracker = 'https://github.com/groovyfx-project/groovyfx/issues'
            scm          = 'https://github.com/groovyfx-project/groovyfx.git'
        }

        people {
            [
                    JimClarke5 : 'Jim Clarke',
                    deanriverson : 'Dean Iverson',
                    russel : 'Russel Winder',
                    aalmiray : 'Andres Almiray',
                    Dierk : 'Dierk KÃ¶nig'
            ].each { devId, devName ->
                person {
                    id   = devId
                    name = devName
                    roles = ['developer']
                }
            }
        }

        implementation { enabled = false }

        credentials {
            sonatype {
                username = project.sonatypeUsername
                password = project.sonatypePassword
            }
        }
    }

    license {
        licenses {
            license {
                id = 'Apache-2.0'
            }
        }
    }

    bintray {
        credentials {
            username = project.bintrayUsername
            password = project.bintrayApiKey
        }
        userOrg = 'groovyfx'
        name    = 'groovyfx'
        githubRepo = 'groovyfx-project/groovyfx'
    }

    stats {
        formats = ['xml', 'txt']
    }

    apidoc {
        enabled = false
    }

    groovydoc {
        replaceJavadoc = true
        options {
            link 'http://junit.org/javadoc/latest/', 'org.junit.', 'junit.'
            link 'http://docs.oracle.com/javase/8/docs/api/', 'java.', 'org.xml.', 'javax.', 'org.w3c.'
            link 'http://docs.oracle.com/javase/8/javafx/api/', 'javafx.'
            link 'http://docs.groovy-lang.org/latest/html/api/', 'groovy.', 'org.codehaus.groovy'
        }
    }
}

repositories {
    if (project.hasProperty('groovyfx_useMavenLocal') && Boolean.valueOf(project.groovyfx_useMavenLocal)) { mavenLocal() }
    jcenter()
}

configurations {
    jansi.extendsFrom(runtime)
}

dependencies {
    compile "org.codehaus.groovy:groovy-all:${groovyfx_groovyVersion}"
    testCompile "junit:junit:${groovyfx_junitVersion}"
    jansi "org.fusesource.jansi:jansi:${groovyfx_jansiVersion}"
    testCompile("org.spockframework:spock-core:${groovyfx_spockVersion}") {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }

    // TODO refactor duplication

    compile "org.openjfx:javafx-base:${groovyfx_javafxVersion}:${platform}"
    compile "org.openjfx:javafx-graphics:${groovyfx_javafxVersion}:${platform}"
    compile "org.openjfx:javafx-controls:${groovyfx_javafxVersion}:${platform}"
    compile "org.openjfx:javafx-fxml:${groovyfx_javafxVersion}:${platform}"
    compile "org.openjfx:javafx-swing:${groovyfx_javafxVersion}:${platform}"
    compile "org.openjfx:javafx-web:${groovyfx_javafxVersion}:${platform}"
    compile "org.openjfx:javafx-media:${groovyfx_javafxVersion}:${platform}"
}

apply {
    // from 'gradle/demo.gradle'
}

idea {
  module {
    // excludeDirs += file('gradle/') // Gradle directory including the wrapper subdirectory.
    excludeDirs += file('.settings/') // Eclipse settings directory.
    excludeDirs += file('bin') // Eclipse compilation directory.
    excludeDirs += file('out') // IDEA compilation directory.
    excludeDirs += file('build') // Gradle compilation directory.
  }
  project {
    jdkName '11'
    languageLevel '11'
    ipr {
      withXml { provider ->
        final node = provider.asNode()
        final component = provider.asNode().component
        node.component.find { it.'@name' == 'VcsDirectoryMappings' }.mapping[0].'@vcs' = 'Git'
        final gradleSettings = node.appendNode('component' , [name: 'GradleSettings'])
        gradleSettings.appendNode('option', [name: 'linkedProjectPath', value: '$PROJECT_DIR$/build.gradle'])
      }
    }
  }
}

asciidoctor {
  //sources { include 'index.adoc' }
  attributes toc: 'left',
             doctype: 'book',
             icons: 'font',
             encoding: 'utf-8',
             sectlink: true,
             sectanchors: true,
             numbered: true,
             linkattrs: true,
             imagesdir: 'images',
             stylesheet: 'css/style.css',
             'source-highlighter': 'coderay',
             'groovyfx-version': project.version,
             'groovy-version': project.groovyfx_groovyVersion
}

test {
    testLogging {
        exceptionFormat "full"
    }
}

jacoco {
    toolVersion = '0.8.2'
}

jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    additionalSourceDirs = project.files(sourceSets.main.allSource.srcDirs)
    sourceDirectories = project.files(sourceSets.main.allSource.srcDirs)
    classDirectories =  project.files(sourceSets.main.output)
    reports {
        xml.enabled = true
        csv.enabled = false
        html.enabled = true
    }
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
            'groovyfx.version'   : project.version
        ])
    }
}
