/*
 * Copyright 2011-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.text.SimpleDateFormat

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.13.0'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'net.nemerosa:versioning:2.4.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.1'
    }
}

ext {
    buildTimeAndDate = new Date()
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
}

apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'eclipse'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'net.nemerosa.versioning'

repositories {
    if (project.hasProperty('groovyfx_useMavenLocal') && Boolean.valueOf(project.groovyfx_useMavenLocal)) { mavenLocal() }
    jcenter()
}

configurations {
    jansi.extendsFrom(runtime)
}

dependencies {
    compile "org.codehaus.groovy:groovy-all:${groovyfx_groovyVersion}"
    testCompile "junit:junit:${groovyfx_junitVersion}"
    jansi 'org.fusesource.jansi:jansi:1.11'
    testCompile("org.spockframework:spock-core:${groovyfx_spockVersion}") {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
    println "Groovy: ${groovyfx_groovyVersion}; JUnit: ${groovyfx_junitVersion}"
}

apply {
    from 'gradle/demo.gradle'
    from 'gradle/deploy.gradle'
    from 'gradle/publishing.gradle'
    from 'gradle/code-quality.gradle'
}

jar {
    manifest {
        attributes(
            'Built-By': System.properties['user.name'],
            'Created-By': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString(),
            'Build-Date': buildDate,
            'Build-Time': buildTime,
            'Build-Revision': versioning.info.commit,
            'Specification-Title': project.name,
            'Specification-Version': project.version,
            'Specification-Vendor': 'groovyfx.org',
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Implementation-Vendor': 'groovyfx.org'
        )
    }

    metaInf {
        from '.'
        include 'LICENSE'
    }
}

/*
signArchives.onlyIf {
    project.hasProperty('signing.keyId')
}

uploadArchives.onlyIf {
    project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')
}
*/

idea {
  module {
    // excludeDirs += file('gradle/') // Gradle directory including the wrapper subdirectory.
    excludeDirs += file('.settings/') // Eclipse settings directory.
    excludeDirs += file('bin') // Eclipse compilation directory.
    excludeDirs += file('out') // IDEA compilation directory.
    excludeDirs += file('build') // Gradle compilation directory.
  }
  project {
    ipr {
      withXml { provider ->
        final node = provider.asNode()
        final component = provider.asNode().component
        node.component.find { it.'@name' == 'VcsDirectoryMappings' }.mapping[0].'@vcs' = 'Git'
        final gradleSettings = node.appendNode('component' , [name: 'GradleSettings'])
        gradleSettings.appendNode('option', [name: 'linkedProjectPath', value: '$PROJECT_DIR$/build.gradle'])
      }
    }
  }
}

asciidoctor {
  //sources { include 'index.adoc' }
  attributes toc: 'left',
             doctype: 'book',
             icons: 'font',
             encoding: 'utf-8',
             sectlink: true,
             sectanchors: true,
             numbered: true,
             linkattrs: true,
             imagesdir: 'images',
             stylesheet: 'css/style.css',
             'source-highlighter': 'coderay',
             'groovyfx-version': project.version,
             'groovy-version': project.groovyfx_groovyVersion
}

test {
    testLogging {
        exceptionFormat "full"
    }
}

jacoco {
    toolVersion = '0.7.4.201502262128'
}

jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    additionalSourceDirs = project.files(sourceSets.main.allSource.srcDirs)
    sourceDirectories = project.files(sourceSets.main.allSource.srcDirs)
    classDirectories =  project.files(sourceSets.main.output)
    reports {
        xml.enabled = true
        csv.enabled = false
        html.enabled = true
    }
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
            'groovyfx.version'   : project.version
        ])
    }
}

task wrapper(type: Wrapper) {
  gradleVersion = '3.1'
}
